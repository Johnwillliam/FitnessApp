@page "/exercises"
@using EntityFramework.Context;
@using EntityFramework.Entities;
@using FitnessApp.Data;
@inject ExerciseDescriptionService ExerciseService
@inject UserProgressService UserProgressService
@inject NavigationManager NavigationManager
@inject Session Sesssion
@inject UserService UserService
@inject FavoriteExerciseService FavoriteExerciseService

<PageTitle>Exercises</PageTitle>

<h3>Exercises</h3>

@if (user == null)
{
    <h3>Please login</h3>
}
else
{
    <h4>Create New Exercise:</h4>

    <div class="input-group">
        <div class="form-floating">
            <input type="text" class="form-control" min="0" @bind="@exerciseName" />
            <label for="floatingInputGroup1">Exercise Name</label>
        </div>
        <button class="btn btn-outline-secondary" @onclick="CreateExercise">Create</button>
    </div>

    <h4>All Exercises:</h4>
    @if (exerciseDescriptions != null && exerciseDescriptions.Any())
    {
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Exercise Name</th>
                    <th>Max Weight Used</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var exercise in exerciseDescriptions)
                {
                    <tr>
                        <td>@exercise.Name</td>
                        <td>@exercise.MaxWeightUsed</td>
                        <td>
                            <div class="btn-group">
                                @if(exercise.Favorite)
                                {
                                    <button type="button" class="btn btn-outline-secondary" @onclick="(() => Unfavorite(exercise))">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">
                                            <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"></path>
                                        </svg>
                                        <span class="visually-hidden">Button</span>
                                    </button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-outline-secondary" @onclick="(() => Favorite(exercise))">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star" viewBox="0 0 16 16">
                                            <path d="M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288L8 2.223l1.847 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.565.565 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z"></path>
                                        </svg>
                                        <span class="visually-hidden">Button</span>
                                    </button>
                                }         
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No exercises found.</p>
    }
}

@code {
    private List<ExerciseDescription> exerciseDescriptions;
    private List<UserProgress> userProgressList;
    private string exerciseName;
    private User? user;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            user = await Sesssion.GetUser(NavMenu.UserKey);
            await OnInitializedAsync();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if(user == null)
        {
            return;
        }

        exerciseDescriptions = await ExerciseService.GetExercises();
        user.FavoriteExercises = await FavoriteExerciseService.GetFavoriteExercises(user);
        foreach (var exercise in exerciseDescriptions)
        {
            var exercises = new FitnessAppContext().ExcerciseProgresses.Where(x => x.ExcerciseId == exercise.Id).ToList();
            exercise.MaxWeightUsed = exercises.Any() ? exercises.Max(x => x.WeightDone) : 0;
            exercise.Favorite = user.FavoriteExercises.Any(x => x.ExerciseDescriptionId == exercise.Id);
        }
        userProgressList = await UserProgressService.GetUserProgresses();
    }

    public async Task Favorite(ExerciseDescription exercise)
    {
        user.FavoriteExercises.Add(new FavoriteExercise(exercise));
        await UserService.UpdateUser(user);
        OnInitializedAsync();
    }

    public async Task Unfavorite(ExerciseDescription exercise)
    {
        var favorite = user.FavoriteExercises.FirstOrDefault(x => x.ExerciseDescriptionId == exercise.Id);
        await FavoriteExerciseService.RemoveFavoriteExercise(favorite);
        OnInitializedAsync();
    }

    private async Task CreateExercise()
    {
        if (!string.IsNullOrEmpty(exerciseName))
        {
            var exercise = new ExerciseDescription { Name = exerciseName };
            await ExerciseService.AddExercise(exercise);
            exerciseName = string.Empty;
            NavigationManager.NavigateTo("/exercises");
        }
    }
}
