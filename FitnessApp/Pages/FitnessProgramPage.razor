@page "/fitnessprogram"
@using EntityFramework.Entities;
@using FitnessApp.Data;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.Rendering;
@inject FitnessProgramService FitnessProgramService
@inject ExerciseDescriptionService ExerciseDescriptionService
@inject NavigationManager NavigationManager
@inject Session Sesssion

<PageTitle>Fitness Program</PageTitle>

<h3>Fitness Program</h3>

@if (user == null)
{
    <h3>Please login</h3>
}
else
{
    <h3>Add Fitness Program</h3>
    <div class="input-group">
        <div class="form-floating">
            <input type="text" class="form-control" min="0" @bind="@programName" />
            <label for="floatingInputGroup1">Program Name</label>
        </div>
        <div class="form-floating">
            <input type="number" class="form-control" min="0" @bind="@numberOfWeeks" />
            <label for="floatingInputGroup1">Number of Weeks</label>
        </div>
        <div class="form-floating">
            <input type="number" class="form-control" min="0" @bind="@daysPerWeek" />
            <label for="floatingInputGroup1">Days per Week</label>
        </div>
        <button class="btn btn-outline-secondary" @onclick="GenerateWorkouts" disabled="@(!canGenerateWorkouts)">Generate</button>
    </div>

    <h4>Select a Fitness Program:</h4>
    <div class="input-group">
        <select class="form-select" @bind="@selectedFitnessProgramId">
            <option value="">-- Select --</option>
            @foreach (var fitnessProgram in fitnessPrograms)
            {
                <option value="@fitnessProgram.Id">@fitnessProgram.Name</option>
            }
        </select>

        <button class="btn btn-outline-secondary" @onclick="LoadWorkouts">Load</button>
    </div>

    @if (showWorkouts)
    {
        <h4 style="padding-top:50px">Workouts</h4>
        <div class="accordion" id="accordionExample">

            @foreach (var workout in workouts)
            {
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#@workout.Week-@workout.Day" aria-expanded="true" aria-controls="@workout.Week-@workout.Day">
                            Week @workout.Week - Day @workout.Day
                        </button>
                    </h2>
                    <div id="@workout.Week-@workout.Day" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                        <div class="accordion-body">

                            @foreach (var exercise in workout.Exercises)
                            {
                                <div class="input-group">
                                    <select @bind="exercise.ExcerciseId" class="form-select">
                                        <option value="">Choose exercise</option>
                                        @foreach (var exerciseDescription in exerciseDescriptions)
                                        {
                                            <option value="@exerciseDescription.Id">@exerciseDescription.Name</option>
                                        }
                                    </select>
                                    <div class="form-floating">
                                        <input type="number" class="form-control" min="0" @bind="@exercise.Reps" placeholder="Reps" />
                                        <label for="floatingInputGroup1">Reps</label>
                                    </div>
                                    <div class="form-floating">
                                        <input type="number" class="form-control" min="0" @bind="@exercise.Sets" placeholder="Sets" />
                                        <label for="floatingInputGroup1">Sets</label>
                                    </div>
                                    <div class="form-floating">
                                        <input type="number" class="form-control" min="0" @bind="@exercise.RPE" placeholder="RPE / %" />
                                        <label for="floatingInputGroup1">RPE / %</label>
                                    </div>
                                    <button class="btn btn-outline-secondary" @onclick="(() => RemoveExercise(workout, exercise))">Remove</button>
                                </div>
                            }
                            <div class="form-floating">
                                <button class="btn btn-outline-secondary" @onclick="(() => AddExercise(workout))">Add Exercise</button>
                                <button class="btn btn-outline-secondary" @onclick="UpdateFitnessProgram">Save Program</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div>
            <button class="btn btn-outline-secondary" @onclick="UpdateFitnessProgram">Save Program</button>
        </div>
    }
}

@code {
    private List<ExerciseDescription> exerciseDescriptions = new List<ExerciseDescription>();
    private string programName = string.Empty;
    private int daysPerWeek;
    private int numberOfWeeks;
    private bool showWorkouts;
    private List<FitnessWorkout> workouts = new List<FitnessWorkout>();
    private bool canGenerateWorkouts => !string.IsNullOrEmpty(programName) && daysPerWeek > 0 && numberOfWeeks > 0;
    private int selectedFitnessProgramId;
    private List<FitnessProgram> fitnessPrograms = new List<FitnessProgram>();
    private FitnessProgram fitnessProgram;
    private User? user;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            user = await Sesssion.GetUser(NavMenu.UserKey);
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        fitnessPrograms = await FitnessProgramService.GetFitnessPrograms();
        exerciseDescriptions = await ExerciseDescriptionService.GetExercises();
    }

    private async Task LoadWorkouts()
    {
        showWorkouts = true;
        fitnessProgram = await FitnessProgramService.GetFitnessProgram(selectedFitnessProgramId);
        workouts = fitnessProgram.Workouts;
        StateHasChanged();
    }

    private async void GenerateWorkouts()
    {
        if (await FitnessProgramService.NameExists(programName) || user == null)
        {
            return;
        }

        showWorkouts = true;
        workouts = new List<FitnessWorkout>();

        for (int week = 1; week <= numberOfWeeks; week++)
        {
            for (int day = 1; day <= daysPerWeek; day++)
            {
                var workout = new FitnessWorkout
                    {
                        Week = week,
                        Day = day,
                        Exercises = new List<FitnessExercise>()
                    };

                workouts.Add(workout);
            }
        }
        await SaveFitnessProgram();
    }

    private async void AddExercise(FitnessWorkout workout)
    {
        workout.Exercises.Add(new FitnessExercise());
        fitnessProgram.Workouts = workouts;
        await FitnessProgramService.UpdateFitnessProgram(fitnessProgram);
    }

    private void RemoveExercise(FitnessWorkout workout, FitnessExercise exercise)
    {
        workout.Exercises.Remove(exercise);
    }

    private async Task UpdateFitnessProgram()
    {
        fitnessProgram.Workouts = workouts;
        await FitnessProgramService.UpdateFitnessProgram(fitnessProgram);
    }

    private async Task SaveFitnessProgram()
    {
        fitnessProgram = new FitnessProgram
            {
                Name = programName,
                Workouts = workouts,
                UserId = user.Id
            };

        await FitnessProgramService.SaveFitnessProgram(fitnessProgram);
        await OnInitializedAsync();
        StateHasChanged();
    }
}
