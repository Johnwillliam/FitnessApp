@using Blazored.LocalStorage
@using EntityFramework.Entities;
@using FitnessApp.Data;
@inject Session Sesssion
@inject UserService UserService
@inject NavigationManager NavigationManager

<nav class="navbar navbar-dark bg-dark fixed-top">
    <div class="container-fluid">
        <div class="col-md-8">
            <h1 href="#">Fitness Progress</h1>
        </div>
        <section class="row">
            <div class="col-md-4">
                <div class="btn-group float-right">
                    @if (loggedIn)
                    {
                        <button class="btn btn-sm btn-danger" type="button" title="Logout" @onclick="Logout"><span class="oi oi-account-logout"></span></button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-success" title="Login" @onclick="OpenLogin"><span class="oi oi-account-login"></span></button>
                    }
                    <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasDarkNavbar" aria-controls="offcanvasDarkNavbar" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                </div>
            </div>
        </section>
        <div class="offcanvas offcanvas-end text-bg-dark" tabindex="-1" id="offcanvasDarkNavbar" aria-labelledby="offcanvasDarkNavbarLabel" style="width:50%">
            <div class="offcanvas-header">
                <h5 class="offcanvas-title" id="offcanvasDarkNavbarLabel">Menu</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
            <div class="offcanvas-body">
                <ul class="navbar-nav justify-content-end pe-3">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="fitnessprogram">Programs</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="userprogress">User Progress</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="exercises">Exercises</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="account">Account</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</nav>

<div class="modal-backdrop fade @(show ? "show" : "") @(display ? "d-block" : "d-none")"></div>

<div class="modal fade @(show ? "show" : "")  @(display ? "d-block" : "d-none")" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Login Form</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="loginEmail" class="form-label">Email</label>
                    <input class="form-control" type="email" required @bind="@userName" />
                </div>
                <div class="mb-3">
                    <label for="loginPassword" class="form-label">Password</label>
                    <input class="form-control" type="password" required @bind="@password" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" @onclick="Login">Login</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    public static string UserKey = "user";
    private bool show, display, loggedIn;
    private string userName, password;
    private User? user;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            user = await Sesssion.GetUser(NavMenu.UserKey);
            loggedIn = user != null;
            StateHasChanged();
        }
    }

    public async Task<string?> GetUserName()
    {
        return await Sesssion.GetString(UserKey);
    }

    public async Task OpenLogin()
    {
        display = true;
        await Task.Delay(100);
        show = true;
    }

    public async Task Logout()
    {
        loggedIn = false;
        await Sesssion.Delete(UserKey);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    private async Task Close()
    {
        show = false;
        await Task.Delay(500);
        display = false;
    }

    private async Task Login()
    {
        if (!string.IsNullOrEmpty(userName) && !string.IsNullOrEmpty(password) && UserService.ValidPassword(userName, password).Result)
        {
            await Close();
            loggedIn = true;
            user = await UserService.GetUser(userName);
            await Sesssion.Update(UserKey, user);
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
    }
}